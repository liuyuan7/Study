# 给你一个整数数组 nums 。如果任一值在数组中出现 至少两次 ，返回 true ；如果数组中每个元素互不相同，返回 false
def containsDuplicate(nums):
    """
    :type nums: List[int]
    :rtype: bool
    """
    return len(nums) - len(set(nums)) > 0


def maxSubArray(nums) -> int:
    tmp = nums[0]
    maxData = tmp
    n = len(nums)
    for i in range(1, n):
        # 当当前序列加上此时的元素的值大于tmp的值，说明最大序列和可能出现在后续序列中，记录此时的最大值
        if tmp + nums[i] > nums[i]:
            maxData = max(maxData, tmp + nums[i])
            tmp = tmp + nums[i]
        else:
            # 当tmp(当前和)小于下一个元素时，当前最长序列到此为止。以该元素为起点继续找最大子序列,
            # 并记录此时的最大值
            maxData = max(maxData, tmp, tmp + nums[i], nums[i])
            tmp = nums[i]
    return maxData


def lengthOfLongestSubstring(s: str) -> int:
    k, res, j_dict = -1, 0, {}
    for i,j in enumerate(s):
        if j in j_dict and j_dict[j]>k:
            k = j_dict[j]
            j_dict = i
        else:
            j_dict = i
            res = max(res,i-k)
    return res


if __name__ == '__main__':
    # nums = [1, 2, 3, 1]
    nums = [-2, 1]
    print(maxSubArray(nums))
